<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\models\base;

use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "signal".
 *
 * @property integer $id
 * @property integer $sigcat_id
 * @property integer $sigsym_base_id
 * @property integer $sigsym_quote_id
 * @property integer $sig_active
 * @property string $sig_code
 * @property string $sig_name
 * @property string $sig_3cactiontext
 * @property string $sig_3callowedquotes
 * @property string $sig_description
 * @property string $sig_remarks
 * @property integer $sig_lock
 * @property string $sig_createdt
 * @property string $sig_updatedt
 * @property integer $sig_deletedat
 * @property string $sig_deletedt
 * @property integer $sigusr_deleted_id
 * @property integer $sig_createdat
 * @property integer $sigusr_created_id
 * @property integer $sig_updatedat
 * @property integer $sigusr_updated_id
 *
 * @property \backend\models\Botsignal[] $botsignals
 * @property \backend\models\Membership[] $mbrs
 * @property \backend\models\Category $sigcat
 * @property \backend\models\SignalMembership[] $signalMemberships
 * @property \backend\models\Symbol $sigsymBase
 * @property \backend\models\Symbol $sigsymQuote
 * @property \backend\models\User $sigusrCreated
 * @property \backend\models\User $sigusrDeleted
 * @property \backend\models\User $sigusrUpdated
 * @property string $aliasModel
 */
abstract class Signal extends \yii\db\ActiveRecord
{



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'signal';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::className(),
                'createdByAttribute' => 'sigusr_created_id',
                'updatedByAttribute' => 'sigusr_updated_id',
            ],
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'sig_createdat',
                'updatedAtAttribute' => 'sig_updatedat',
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['sigcat_id', 'sig_code', 'sig_name', 'sig_createdt', 'sig_updatedt'], 'required'],
            [['sigcat_id', 'sigsym_base_id', 'sigsym_quote_id', 'sig_active', 'sig_lock', 'sig_deletedat', 'sigusr_deleted_id'], 'integer'],
            [['sig_3callowedquotes', 'sig_description', 'sig_remarks'], 'string'],
            [['sig_createdt', 'sig_updatedt', 'sig_deletedt'], 'safe'],
            [['sig_code'], 'string', 'max' => 32],
            [['sig_name', 'sig_3cactiontext'], 'string', 'max' => 64],
            [['sig_code'], 'unique'],
            [['sigcat_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\Category::className(), 'targetAttribute' => ['sigcat_id' => 'id']],
            [['sigsym_base_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\Symbol::className(), 'targetAttribute' => ['sigsym_base_id' => 'id']],
            [['sigsym_quote_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\Symbol::className(), 'targetAttribute' => ['sigsym_quote_id' => 'id']],
            [['sigusr_created_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['sigusr_created_id' => 'id']],
            [['sigusr_deleted_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['sigusr_deleted_id' => 'id']],
            [['sigusr_updated_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['sigusr_updated_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('models', 'ID'),
            'sigcat_id' => Yii::t('models', 'Category'),
            'sigsym_base_id' => Yii::t('models', 'SymbolBase'),
            'sigsym_quote_id' => Yii::t('models', 'SymbolQuote'),
            'sig_active' => Yii::t('models', 'Active'),
            'sig_code' => Yii::t('models', 'Signalcode'),
            'sig_name' => Yii::t('models', 'Name'),
            'sig_3cactiontext' => Yii::t('models', '3CActiontext'),
            'sig_3callowedquotes' => Yii::t('models', '3CAllowedQuoteCoins'),
            'sig_description' => Yii::t('models', 'Description'),
            'sig_remarks' => Yii::t('models', 'Remarks'),
            'sig_lock' => Yii::t('models', 'Lock'),
            'sig_createdt' => Yii::t('models', 'Created'),
            'sig_createdat' => Yii::t('models', 'CreatedAt'),
            'sigusr_created_id' => Yii::t('models', 'CreatedBy'),
            'sig_updatedat' => Yii::t('models', 'UpdatedAt'),
            'sig_updatedt' => Yii::t('models', 'Updated'),
            'sigusr_updated_id' => Yii::t('models', 'UpdatedBy'),
            'sig_deletedat' => Yii::t('models', 'DeletedAt'),
            'sig_deletedt' => Yii::t('models', 'Deleted'),
            'sigusr_deleted_id' => Yii::t('models', 'DeletedBy'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
        /*    'id' => Yii::t('models', 'ID'),
            'sigcat_id' => Yii::t('models', 'Category'),
            'sigsym_base_id' => Yii::t('models', 'SymbolBase'),
            'sigsym_quote_id' => Yii::t('models', 'SymbolQuote'),
            'sig_active' => Yii::t('models', 'Active'),
            'sig_code' => Yii::t('models', 'Signalcode'),
            'sig_name' => Yii::t('models', 'Name'),
            'sig_3cactiontext' => Yii::t('models', '3CActiontext'),
            'sig_3callowedquotes' => Yii::t('models', '3CAllowedQuoteCoins'),
            'sig_description' => Yii::t('models', 'Description'),
            'sig_remarks' => Yii::t('models', 'Remarks'),
            'sig_lock' => Yii::t('models', 'Lock'),
            'sig_createdt' => Yii::t('models', 'Created'),
            'sig_createdat' => Yii::t('models', 'CreatedAt'),
            'sigusr_created_id' => Yii::t('models', 'CreatedBy'),
            'sig_updatedat' => Yii::t('models', 'UpdatedAt'),
            'sig_updatedt' => Yii::t('models', 'Updated'),
            'sigusr_updated_id' => Yii::t('models', 'UpdatedBy'),
            'sig_deletedat' => Yii::t('models', 'DeletedAt'),
            'sig_deletedt' => Yii::t('models', 'Deleted'),
            'sigusr_deleted_id' => Yii::t('models', 'DeletedBy'), */
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBotsignals()
    {
        return $this->hasMany(\backend\models\Botsignal::className(), ['bsgsig_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMbrs()
    {
        return $this->hasMany(\backend\models\Membership::className(), ['id' => 'mbr_id'])->viaTable('signal_membership', ['sig_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSigcat()
    {
        return $this->hasOne(\backend\models\Category::className(), ['id' => 'sigcat_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSignalMemberships()
    {
        return $this->hasMany(\backend\models\SignalMembership::className(), ['sig_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSigsymBase()
    {
        return $this->hasOne(\backend\models\Symbol::className(), ['id' => 'sigsym_base_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSigsymQuote()
    {
        return $this->hasOne(\backend\models\Symbol::className(), ['id' => 'sigsym_quote_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSigusrCreated()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'sigusr_created_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSigusrDeleted()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'sigusr_deleted_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSigusrUpdated()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'sigusr_updated_id']);
    }


    
    /**
     * @inheritdoc
     * @return \backend\models\SignalQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \backend\models\SignalQuery(get_called_class());
    }


}
