<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\controllers\base;

use Yii;
use backend\models\Usermember;
use backend\models\UsermemberSearch;
use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use yii\filters\AccessControl;
use dmstr\bootstrap\Tabs;
use common\helpers\GeneralHelper;

/**
* UsermemberController implements the CRUD actions for Usermember model.
*/
class UsermemberController extends Controller
{


	/**
	* @var boolean whether to enable CSRF validation for the actions in this controller.
	* CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
	*/
	public $enableCsrfValidation = false;

    /**
    * @inheritdoc
    */
    public function behaviors()
    {
    $access = GeneralHelper::checkSiteAccess();
    Yii::trace('** behavior UsermemberController: '.print_r($access, true));
  	  return [
    		'access' => [
    			'class' => AccessControl::className(),
    			'rules' => [
    				/*[
    					'allow' => true,
          	  'actions' => ['index', 'view', 'create', 'update', 'delete'],
            	'roles' => ['BackendUsermemberFull'],
          	],
    				[
    					'allow' => true,
           		'actions' => ['index', 'view'],
            	'roles' => ['BackendUsermemberView'],
          	],
    				[
    					'allow' => true,
            	'actions' => ['update', 'create', 'delete'],
            	'roles' => ['BackendUsermemberEdit'],
          	],*/
            [
              'allow' => ($access['backend'] == 'true'),
              'roles' => ['@'],  // Allow authenticated/loged in users
            ],
            // anybody else is denied
        	],
      	],
    	];
    }

	/**
	* Lists all Usermember models.
	* @return mixed
	*/
	public function actionIndex()
	{
    $searchModel  = new UsermemberSearch;
    $dataProvider = $searchModel->search($_GET);

		Tabs::clearLocalStorage();

		Url::remember();
		\Yii::$app->session['__crudReturnUrl'] = null;

		return $this->render('index', [
			'dataProvider' => $dataProvider,
    	'searchModel' => $searchModel,
		]);
	}

	/**
	* Displays a single Usermember model.
	* @param integer $id
	*
	* @return mixed
	*/
	public function actionView($id)
	{
		\Yii::$app->session['__crudReturnUrl'] = Url::previous();
		Url::remember();
		Tabs::rememberActiveState();

		return $this->render('view', [
			'model' => $this->findModel($id),
		]);
	}

	/**
	* Creates a new Usermember model.
	* If creation is successful, the browser will be redirected to the 'view' page.
	* @return mixed
	*/
	public function actionCreate()
	{
		$model = new Usermember;
    try {
      $model = new Membership;
      $ok = false;
      if ($model->load($_POST)) {
        $model->umb_roles = implode(',', $model->umb_roles);
        $model->umb_createdat = $model->umb_updatedat = time();
        $model->umbusr_created_id = $model->umbusr_updated_id = \Yii::$app->user->id;
        $model->umb_createdt = $model->umb_updatedt = date('Y-m-d H:i:s', time());
        if ($model->save()) { $ok = true; }
      }
      if ($ok) {
        return $this->redirect(['view', 'id' => $model->id]);
      } elseif (!\Yii::$app->request->isPost) {
        $model->load($_GET);
      }
    } catch (\Exception $e) {
      $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
      $model->addError('_exception', $msg);
    }
    return $this->render('create', ['model' => $model]);
	}

	/**
	* Updates an existing Usermember model.
	* If update is successful, the browser will be redirected to the 'view' page.
	* @param integer $id
	* @return mixed
	*/
	public function actionUpdate($id)
	{
    try {
      $model = $this->findModel($id);
      $model->umb_roles = explode(',', $model->umb_roles);
      $ok = false;
      if ($model->load($_POST)) {
        $model->umb_roles = implode(',', $model->umb_roles);
        $model->umb_updatedat = time();
        $model->umbusr_updated_id = \Yii::$app->user->id;
        $model->umb_updatedt = date('Y-m-d H:i:s', time());
        if ($model->save()) { $ok = true; }
      }
      if ($ok) {
        return $this->redirect(Url::previous());
      }
    } catch (\Exception $e) {
      $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
      $model->addError('_exception', $msg);
    }
		return $this->render('update', ['model' => $model, ]);
	}

	/**
	* Deletes an existing Usermember model.
	* If deletion is successful, the browser will be redirected to the 'index' page.
	* @param integer $id
	* @return mixed
	*/
	public function actionDelete($id)
	{
    try {
      $model = $this->findModel($id); //->delete();
      $model->umb_deletedat = time();
      $model->umbusr_deleted_id = \Yii::$app->user->id;
      $model->umb_deletedt = date('Y-m-d H:i:s', time());
      if ($model->save()) { $ok = true; }
    } catch (\Exception $e) {
      $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
      \Yii::$app->getSession()->addFlash('error', $msg);
      return $this->redirect(Url::previous());
    }

    // TODO: improve detection
    $isPivot = strstr('$id',',');
    if (!$ok && $isPivot) {
      return $this->redirect(Url::previous());
    } elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
      Url::remember(null);
      $url = \Yii::$app->session['__crudReturnUrl'];
      \Yii::$app->session['__crudReturnUrl'] = null;

      return $this->redirect($url);
    } else {
      return $this->redirect(['index']);
    }
	}

	/**
	* Finds the Usermember model based on its primary key value.
	* If the model is not found, a 404 HTTP exception will be thrown.
	* @param integer $id
	* @return Usermember the loaded model
	* @throws HttpException if the model cannot be found
	*/
	protected function findModel($id)
	{
		if (($model = Usermember::findOne($id)) !== null) {
			return $model;
		} else {
			throw new HttpException(404, 'The requested usermember (id='.$id.') does not exist.');
		}
	}
}
