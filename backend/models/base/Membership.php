<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\models\base;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "membership".
 *
 * @property integer $id
 * @property integer $mbrcat_id
 * @property string $mbr_language
 * @property integer $mbr_active
 * @property integer $mbr_active4admin
 * @property integer $mbr_order
 * @property string $mbr_code
 * @property string $mbr_title
 * @property integer $mbr_groupnr
 * @property string $mbr_cardbody
 * @property string $mbr_detailbody
 * @property string $mbr_discordroles
 * @property string $mbr_discordlogchanid
 * @property string $mbr_remarks
 * @property integer $mbr_lock
 * @property string $mbr_createdt
 * @property integer $mbrusr_created_id
 * @property string $mbr_updatedt
 * @property integer $mbrusr_updated_id
 * @property integer $mbr_deletedat
 * @property string $mbr_deletedt
 * @property integer $mbrusr_deleted_id
 * @property integer $mbr_createdat
 * @property integer $mbr_updatedat
 *
 * @property \backend\models\Category $mbrcat
 * @property \backend\models\User $mbrusrCreated
 * @property \backend\models\User $mbrusrDeleted
 * @property \backend\models\User $mbrusrUpdated
 * @property \backend\models\Pricelist[] $pricelists
 * @property \backend\models\Usermember[] $usermembers
 * @property \backend\models\Userpay[] $userpays
 * @property string $aliasModel
 */
abstract class Membership extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    const MBR_LANGUAGE_EN_US = 'en-US';
    const MBR_LANGUAGE_NL_NL = 'nl-NL';
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'membership';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'mbr_createdat',
                'updatedAtAttribute' => 'mbr_updatedat',
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
						[['mbrcat_id', 'mbr_language', 'mbr_active', 'mbr_order', 'mbr_code', 'mbr_title', 'mbr_createdt', 'mbrusr_created_id', 'mbr_updatedt', 'mbrusr_updated_id'], 'required'],
            [['mbrcat_id', 'mbr_active', 'mbr_active4admin', 'mbr_order', 'mbr_groupnr', 'mbr_lock', 'mbrusr_created_id', 'mbrusr_updated_id', 'mbr_deletedat', 'mbrusr_deleted_id'], 'integer'],
            [['mbr_language', 'mbr_cardbody', 'mbr_detailbody', /*'mbr_discordroles',*/ 'mbr_remarks'], 'string'],
            [['mbr_discordroles', 'mbr_createdt', 'mbr_updatedt', 'mbr_deletedt'], 'safe'],
            [['mbr_code', 'mbr_discordlogchanid'], 'string', 'max' => 32],
            [['mbr_title'], 'string', 'max' => 64],
            [['mbr_code', 'mbr_language'], 'unique', 'targetAttribute' => ['mbr_code', 'mbr_language']],
            [['mbrcat_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\Category::className(), 'targetAttribute' => ['mbrcat_id' => 'id']],
            [['mbrusr_created_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['mbrusr_created_id' => 'id']],
            [['mbrusr_deleted_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['mbrusr_deleted_id' => 'id']],
            [['mbrusr_updated_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['mbrusr_updated_id' => 'id']],
            ['mbr_language', 'in', 'range' => [
                    self::MBR_LANGUAGE_EN_US,
                    self::MBR_LANGUAGE_NL_NL,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('models', 'ID'),
            'mbrcat_id' => Yii::t('models', 'Category'),
            'mbr_language' => Yii::t('models', 'Language'),
            'mbr_active' => Yii::t('models', 'Active'),
						'mbr_active4admin' => Yii::t('models', 'Active4Admin'),
            'mbr_order' => Yii::t('models', 'Order'),
            'mbr_code' => Yii::t('models', 'Code'),
            'mbr_title' => Yii::t('models', 'Title'),
						'mbr_groupnr' => Yii::t('models', 'Groupnr'),
            'mbr_cardbody' => Yii::t('models', 'Cardbody'),
            'mbr_detailbody' => Yii::t('models', 'Detailbody'),
						'mbr_discordroles' => Yii::t('models', 'DiscordRoles'),
						'mbr_discordlogchanid' => Yii::t('models', 'DiscordLogChannelID'),
            'mbr_remarks' => Yii::t('models', 'Remarks'),
            'mbr_lock' => Yii::t('models', 'Lock'),
            'mbr_createdat' => Yii::t('models', 'CreatedAt'),
            'mbr_createdt' => Yii::t('models', 'Created'),
            'mbrusr_created_id' => Yii::t('models', 'CreatedBy'),
            'mbr_updatedat' => Yii::t('models', 'UpdatedAt'),
            'mbr_updatedt' => Yii::t('models', 'Updated'),
            'mbrusr_updated_id' => Yii::t('models', 'UpdatedBy'),
            'mbr_deletedat' => Yii::t('models', 'DeletedAt'),
            'mbr_deletedt' => Yii::t('models', 'Deleted'),
            'mbrusr_deleted_id' => Yii::t('models', 'DeletedBy'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
        /*    'id' => Yii::t('models', 'ID'),
            'mbrcat_id' => Yii::t('models', 'Category'),
            'mbr_language' => Yii::t('models', 'Language'),
            'mbr_active' => Yii::t('models', 'Active'),
						'mbr_active4admin' => Yii::t('models', 'Active4Admin'),
            'mbr_order' => Yii::t('models', 'Order'),
            'mbr_code' => Yii::t('models', 'Code'),
            'mbr_title' => Yii::t('models', 'Title'),
						'mbr_groupnr' => Yii::t('models', 'Groupnr'),
            'mbr_cardbody' => Yii::t('models', 'Cardbody'),
            'mbr_detailbody' => Yii::t('models', 'Detailbody'),
						'mbr_discordroles' => Yii::t('models', 'DiscordRoles'),
						'mbr_discordlogchanid' => Yii::t('models', 'DiscordLogChannelID'),
            'mbr_remarks' => Yii::t('models', 'Remarks'),
            'mbr_lock' => Yii::t('models', 'Lock'),
            'mbr_createdat' => Yii::t('models', 'CreatedAt'),
            'mbr_createdt' => Yii::t('models', 'Created'),
            'mbrusr_created_id' => Yii::t('models', 'CreatedBy'),
            'mbr_updatedat' => Yii::t('models', 'UpdatedAt'),
            'mbr_updatedt' => Yii::t('models', 'Updated'),
            'mbrusr_updated_id' => Yii::t('models', 'UpdatedBy'),
            'mbr_deletedat' => Yii::t('models', 'DeletedAt'),
            'mbr_deletedt' => Yii::t('models', 'Deleted'),
            'mbrusr_deleted_id' => Yii::t('models', 'DeletedBy'), */
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMbrcat()
    {
        return $this->hasOne(\backend\models\Category::className(), ['id' => 'mbrcat_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMbrusrCreated()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'mbrusr_created_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMbrusrDeleted()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'mbrusr_deleted_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMbrusrUpdated()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'mbrusr_updated_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPricelists()
    {
        return $this->hasMany(\backend\models\Pricelist::className(), ['prlmbr_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUsermembers()
    {
        return $this->hasMany(\backend\models\Usermember::className(), ['umbmbr_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserpays()
    {
        return $this->hasMany(\backend\models\Userpay::className(), ['upymbr_id' => 'id']);
    }


    
    /**
     * @inheritdoc
     * @return \backend\models\MembershipQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \backend\models\MembershipQuery(get_called_class());
    }


    /**
     * get column mbr_language enum value label
     * @param string $value
     * @return string
     */
    public static function getMbrLanguageValueLabel($value){
        $labels = self::optsMbrLanguage();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column mbr_language ENUM value labels
     * @return array
     */
    public static function optsMbrLanguage()
    {
        return [
            self::MBR_LANGUAGE_EN_US => Yii::t('models', 'En  Us'),
            self::MBR_LANGUAGE_NL_NL => Yii::t('models', 'Nl  Nl'),
        ];
    }

}
