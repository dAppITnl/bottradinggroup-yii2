<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\models\base;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "symbol".
 *
 * @property integer $id
 * @property string $sym_type
 * @property integer $sym_isquote
 * @property integer $sym_ispair
 * @property integer $symsym_base_id
 * @property integer $symsym_quote_id
 * @property integer $symsym_network_id
 * @property string $sym_contractaddress
 * @property string $sym_code
 * @property string $sym_symbol
 * @property string $sym_name
 * @property string $sym_html
 * @property string $sym_description
 * @property string $sym_rateurl
 * @property string $sym_remarks
 * @property integer $sym_lock
 * @property string $sym_createdt
 * @property integer $symusr_created_id
 * @property string $sym_updatedt
 * @property integer $symusr_updated_id
 * @property integer $sym_deletedat
 * @property string $sym_deletedt
 * @property integer $symusr_deleted_id
 * @property integer $sym_createdat
 * @property integer $sym_updatedat
 *
 * @property \backend\models\Cryptoaddress[] $cryptoaddresses
 * @property \backend\models\Pricelist[] $pricelists
 * @property \backend\models\Signal[] $signals
 * @property \backend\models\Signal[] $signals0
 * @property \backend\models\Symbol[] $symbols
 * @property \backend\models\Symbol[] $symbols0
 * @property \backend\models\Symbol[] $symbols1
 * @property \backend\models\Symbol $symsymBase
 * @property \backend\models\Symbol $symsymNetwork
 * @property \backend\models\Symbol $symsymQuote
 * @property \backend\models\User $symusrCreated
 * @property \backend\models\User $symusrDeleted
 * @property \backend\models\User $symusrUpdated
 * @property \backend\models\Userpay[] $userpays
 * @property \backend\models\Userpay[] $userpays0
 * @property \backend\models\Userpay[] $userpays1
 * @property string $aliasModel
 */
abstract class Symbol extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    const SYM_TYPE_FIAT = 'fiat';
    const SYM_TYPE_CRYPTO = 'crypto';
    const SYM_TYPE_ERC20 = 'erc20';
    const SYM_TYPE_ERC720 = 'erc720';
    const SYM_TYPE_ERC1150 = 'erc1150';
    const SYM_TYPE_NETWORK = 'network';
    const SYM_TYPE_OTHER = 'other';

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'symbol';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'sym_createdat',
                'updatedAtAttribute' => 'sym_updatedat',
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['sym_type', 'sym_code', 'sym_symbol', 'sym_name', 'sym_html', 'sym_createdt', 'symusr_created_id', 'sym_updatedt', 'symusr_updated_id'], 'required'],
            [['sym_type', 'sym_description', 'sym_rateurl', 'sym_remarks'], 'string'],
            [['sym_isquote', 'sym_ispair', 'symsym_base_id', 'symsym_quote_id', 'symsym_network_id', 'sym_lock', 'symusr_created_id', 'symusr_updated_id', 'sym_deletedat', 'symusr_deleted_id'], 'integer'],
            [['sym_createdt', 'sym_updatedt', 'sym_deletedt'], 'safe'],
            [['sym_contractaddress'], 'string', 'max' => 255],
            [['sym_code', 'sym_symbol'], 'string', 'max' => 32],
            [['sym_name'], 'string', 'max' => 64],
            [['sym_html'], 'string', 'max' => 16],
						[['sym_type', 'sym_code'], 'unique', 'targetAttribute' => ['sym_type', 'sym_code']],
            [['symsym_network_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\Symbol::className(), 'targetAttribute' => ['symsym_network_id' => 'id']],
            [['symsym_base_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\Symbol::className(), 'targetAttribute' => ['symsym_base_id' => 'id']],
            [['symsym_quote_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\Symbol::className(), 'targetAttribute' => ['symsym_quote_id' => 'id']],
            [['symusr_created_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['symusr_created_id' => 'id']],
            [['symusr_deleted_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['symusr_deleted_id' => 'id']],
            [['symusr_updated_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['symusr_updated_id' => 'id']],
            ['sym_type', 'in', 'range' => [
                    self::SYM_TYPE_FIAT,
                    self::SYM_TYPE_CRYPTO,
                    self::SYM_TYPE_ERC20,
                    self::SYM_TYPE_ERC720,
                    self::SYM_TYPE_ERC1150,
                    self::SYM_TYPE_NETWORK,
                    self::SYM_TYPE_OTHER,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('models', 'ID'),
            'sym_type' => Yii::t('models', 'Symboltype'),
						'sym_isquote' => Yii::t('models', 'IsQuote'),
            'sym_ispair' => Yii::t('models', 'IsPair'),
            'symsym_base_id' => Yii::t('models', 'PairBase'),
            'symsym_quote_id' => Yii::t('models', 'PairQuote'),
            'symsym_network_id' => Yii::t('models', 'Network'),
            'sym_contractaddress' => Yii::t('models', 'ContractAddress'),
            'sym_code' => Yii::t('models', 'Code'),
						'sym_symbol' => Yii::t('models', 'Symbol'),
            'sym_name' => Yii::t('models', 'Name'),
            'sym_html' => Yii::t('models', 'HTML'),
            'sym_description' => Yii::t('models', 'Description'),
            'sym_rateurl' => Yii::t('models', 'RateURL'),
            'sym_remarks' => Yii::t('models', 'Remarks'),
            'sym_lock' => Yii::t('models', 'Lock'),
            'sym_createdat' => Yii::t('models', 'CreatedAt'),
            'sym_createdt' => Yii::t('models', 'Created'),
            'symusr_created_id' => Yii::t('models', 'CreatedBy'),
            'sym_updatedat' => Yii::t('models', 'UpdatedAt'),
            'sym_updatedt' => Yii::t('models', 'Updated'),
            'symusr_updated_id' => Yii::t('models', 'UpdatedBy'),
            'sym_deletedat' => Yii::t('models', 'DeletedAt'),
            'sym_deletedt' => Yii::t('models', 'Deleted'),
            'symusr_deleted_id' => Yii::t('models', 'DeletedBy'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
        /*    'id' => Yii::t('models', 'ID'),
            'sym_type' => Yii::t('models', 'Symboltype'),
						'sym_isquote' => Yii::t('models', 'IsQuote'),
            'sym_ispair' => Yii::t('models', 'IsPair'),
            'symsym_base_id' => Yii::t('models', 'PairBase'),
            'symsym_quote_id' => Yii::t('models', 'PairQuote'),
            'symsym_network_id' => Yii::t('models', 'Network'),
            'sym_contractaddress' => Yii::t('models', 'ContractAddress'),
            'sym_code' => Yii::t('models', 'Code'),
						'sym_symbol' => Yii::t('models', 'Symbol'),
            'sym_name' => Yii::t('models', 'Name'),
            'sym_html' => Yii::t('models', 'HTML'),
            'sym_description' => Yii::t('models', 'Description'),
            'sym_rateurl' => Yii::t('models', 'RateURL'),
            'sym_remarks' => Yii::t('models', 'Remarks'),
            'sym_lock' => Yii::t('models', 'Lock'),
            'sym_createdat' => Yii::t('models', 'CreatedAt'),
            'sym_createdt' => Yii::t('models', 'Created'),
            'symusr_created_id' => Yii::t('models', 'CreatedBy'),
            'sym_updatedat' => Yii::t('models', 'UpdatedAt'),
            'sym_updatedt' => Yii::t('models', 'Updated'),
            'symusr_updated_id' => Yii::t('models', 'UpdatedBy'),
            'sym_deletedat' => Yii::t('models', 'DeletedAt'),
            'sym_deletedt' => Yii::t('models', 'Deleted'),
            'symusr_deleted_id' => Yii::t('models', 'DeletedBy'),  */
        ]);
    }

   /**
		* @return \yii\db\ActiveQuery
		*/
	 public function getCryptoaddresses()
   {
     return $this->hasMany(\backend\models\Cryptoaddress::className(), ['cadsym_id' => 'id']);
   }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPricelists()
    {
        return $this->hasMany(\backend\models\Pricelist::className(), ['prlsym_id' => 'id']);
    }

   /**
    * @return \yii\db\ActiveQuery
    */
   public function getSignals()
   {
       return $this->hasMany(\backend\models\Signal::className(), ['sigsym_base_id' => 'id']);
   }

   /**
    * @return \yii\db\ActiveQuery
    */
   public function getSignals0()
   {
       return $this->hasMany(\backend\models\Signal::className(), ['sigsym_quote_id' => 'id']);
   }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSymbols()
    {
        return $this->hasMany(\backend\models\Symbol::className(), ['symsym_network_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSymbols0()
    {
        return $this->hasMany(\backend\models\Symbol::className(), ['symsym_base_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSymbols1()
    {
        return $this->hasMany(\backend\models\Symbol::className(), ['symsym_quote_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSymsymBase()
    {
        return $this->hasOne(\backend\models\Symbol::className(), ['id' => 'symsym_base_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSymsymNetwork()
    {
        return $this->hasOne(\backend\models\Symbol::className(), ['id' => 'symsym_network_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSymsymQuote()
    {
        return $this->hasOne(\backend\models\Symbol::className(), ['id' => 'symsym_quote_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSymusrCreated()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'symusr_created_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSymusrDeleted()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'symusr_deleted_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSymusrUpdated()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'symusr_updated_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserpays()
    {
       return $this->hasMany(\backend\models\Userpay::className(), ['upysym_crypto_id' => 'id']);
    }

		/**
		 * @return \yii\db\ActiveQuery
		 */
		public function getUserpays0()
		{
       return $this->hasMany(\backend\models\Userpay::className(), ['upysym_pay_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserpays1()
    {
        return $this->hasMany(\backend\models\Userpay::className(), ['upysym_rate_id' => 'id']);
    }


    /**
     * @inheritdoc
     * @return \backend\models\SymbolQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \backend\models\SymbolQuery(get_called_class());
    }


    /**
     * get column sym_type enum value label
     * @param string $value
     * @return string
     */
    public static function getSymTypeValueLabel($value){
        $labels = self::optsSymType();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column sym_type ENUM value labels
     * @return array
     */
    public static function optsSymType()
    {
        return [
            self::SYM_TYPE_FIAT => Yii::t('models', 'Fiat'),
            self::SYM_TYPE_CRYPTO => Yii::t('models', 'Crypto'),
            self::SYM_TYPE_ERC20 => Yii::t('models', 'erc20'),
            self::SYM_TYPE_ERC720 => Yii::t('models', 'erc720'),
            self::SYM_TYPE_ERC1150 => Yii::t('models', 'erc1150'),
            self::SYM_TYPE_NETWORK => Yii::t('models', 'Network'),
            self::SYM_TYPE_OTHER => Yii::t('models', 'Other'),
        ];
    }

}
