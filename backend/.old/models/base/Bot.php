<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\models\base;

use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "bot".
 *
 * @property integer $id
 * @property integer $botcat_id
 * @property integer $bot_lock
 * @property string $bot_name
 * @property string $bot_3cbotid
 * @property string $bot_dealstartjson
 * @property double $bot_costmonth
 * @property integer $botsym_cost_id
 * @property integer $bot_deletedat
 * @property integer $botusr_deleted_id
 * @property string $bot_createdt
 * @property string $bot_updatedt
 * @property string $bot_deletedt
 * @property string $bot_remarks
 * @property integer $bot_createdat
 * @property integer $botusr_created_id
 * @property integer $bot_updatedat
 * @property integer $botusr_updated_id
 *
 * @property \backend\models\Category $botcat
 * @property \backend\models\Symbol $botsymCost
 * @property \backend\models\User $botusrCreated
 * @property \backend\models\User $botusrDeleted
 * @property \backend\models\User $botusrUpdated
 * @property \backend\models\Signallog[] $signallogs
 * @property \backend\models\Usersignal[] $usersignals
 * @property string $aliasModel
 */
abstract class Bot extends \yii\db\ActiveRecord
{



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'bot';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::className(),
                'createdByAttribute' => 'botusr_created_id',
                'updatedByAttribute' => 'botusr_updated_id',
            ],
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'bot_createdat',
                'updatedAtAttribute' => 'bot_updatedat',
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['botcat_id', 'bot_name', 'bot_3cbotid', 'bot_dealstartjson', 'bot_createdt', 'bot_updatedt'], 'required'],
            [['botcat_id', 'bot_lock', 'botsym_cost_id', 'bot_deletedat', 'botusr_deleted_id'], 'integer'],
            [['bot_dealstartjson', 'bot_remarks'], 'string'],
            [['bot_costmonth'], 'number'],
            [['bot_createdt', 'bot_updatedt', 'bot_deletedt'], 'safe'],
            [['bot_name', 'bot_3cbotid'], 'string', 'max' => 64],
            [['botcat_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\Category::className(), 'targetAttribute' => ['botcat_id' => 'id']],
            [['botsym_cost_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\Symbol::className(), 'targetAttribute' => ['botsym_cost_id' => 'id']],
            [['botusr_created_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['botusr_created_id' => 'id']],
            [['botusr_deleted_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['botusr_deleted_id' => 'id']],
            [['botusr_updated_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['botusr_updated_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('models', 'ID'),
            'botcat_id' => Yii::t('models', 'Category'),
            'bot_lock' => Yii::t('models', 'Lock'),
            'bot_name' => Yii::t('models', 'Name'),
            'bot_3cbotid' => Yii::t('models', '3CBotId'),
            'bot_dealstartjson' => Yii::t('models', 'DealStrartJson'),
            'bot_costmonth' => Yii::t('models', 'CostMonth'),
            'botsym_cost_id' => Yii::t('models', 'CostSymbol'),
            'bot_createdat' => Yii::t('models', 'CreatedAt'),
            'botusr_created_id' => Yii::t('models', 'CreatedBy'),
            'bot_updatedat' => Yii::t('models', 'UpdatedAt'),
            'botusr_updated_id' => Yii::t('models', 'UpdatedBy'),
            'bot_deletedat' => Yii::t('models', 'DeletedAt'),
            'botusr_deleted_id' => Yii::t('models', 'DeletedBy'),
            'bot_createdt' => Yii::t('models', 'Created'),
            'bot_updatedt' => Yii::t('models', 'Updated'),
            'bot_deletedt' => Yii::t('models', 'Deleted'),
            'bot_remarks' => Yii::t('models', 'Remarks'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
        /*    'id' => Yii::t('models', 'ID'),
            'botcat_id' => Yii::t('models', 'Category'),
            'bot_lock' => Yii::t('models', 'Lock'),
            'bot_name' => Yii::t('models', 'Name'),
            'bot_3cbotid' => Yii::t('models', '3CBotId'),
            'bot_dealstartjson' => Yii::t('models', 'DealStrartJson'),
            'bot_costmonth' => Yii::t('models', 'CostMonth'),
            'botsym_cost_id' => Yii::t('models', 'CostSymbol'),
            'bot_createdat' => Yii::t('models', 'CreatedAt'),
            'botusr_created_id' => Yii::t('models', 'CreatedBy'),
            'bot_updatedat' => Yii::t('models', 'UpdatedAt'),
            'botusr_updated_id' => Yii::t('models', 'UpdatedBy'),
            'bot_deletedat' => Yii::t('models', 'DeletedAt'),
            'botusr_deleted_id' => Yii::t('models', 'DeletedBy'),
            'bot_createdt' => Yii::t('models', 'Created'),
            'bot_updatedt' => Yii::t('models', 'Updated'),
            'bot_deletedt' => Yii::t('models', 'Deleted'),
            'bot_remarks' => Yii::t('models', 'Remarks'), */
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBotcat()
    {
        return $this->hasOne(\backend\models\Category::className(), ['id' => 'botcat_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBotsymCost()
    {
        return $this->hasOne(\backend\models\Symbol::className(), ['id' => 'botsym_cost_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBotusrCreated()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'botusr_created_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBotusrDeleted()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'botusr_deleted_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBotusrUpdated()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'botusr_updated_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSignallogs()
    {
        return $this->hasMany(\backend\models\Signallog::className(), ['slgbot_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUsersignals()
    {
        return $this->hasMany(\backend\models\Usersignal::className(), ['usgbot_id' => 'id']);
    }


    
    /**
     * @inheritdoc
     * @return \backend\models\BotQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \backend\models\BotQuery(get_called_class());
    }


}
