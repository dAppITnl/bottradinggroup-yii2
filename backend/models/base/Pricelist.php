<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\models\base;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "pricelist".
 *
 * @property integer $id
 * @property integer $prlmbr_id
 * @property integer $prlcat_id
 * @property string $prlcad_crypto_ids
 * @property integer $prl_active
 * @property integer $prl_active4admin
 * @property string $prl_name
 * @property string $prl_pretext
 * @property string $prl_posttext
 * @property string $prl_startdate
 * @property string $prl_enddate
 * @property string $prl_percode
 * @property integer $prl_maxsignals
 * @property integer $prl_allowedtimes
 * @property string $prl_discountcode
 * @property integer $prlsym_id
 * @property double $prl_price
 * @property string $prl_remarks
 * @property integer $prl_lock
 * @property string $prl_createdt
 * @property integer $prlusr_created_id
 * @property string $prl_updatedt
 * @property integer $prlusr_updated_id
 * @property integer $prl_deletedat
 * @property string $prl_deletedt
 * @property integer $prlusr_deleted_id
 * @property integer $prl_createdat
 * @property integer $prl_updatedat
 *
 * @property \backend\models\Category $prlcat
 * @property \backend\models\Membership $prlmbr
 * @property \backend\models\Symbol $prlsym
 * @property \backend\models\User $prlusrCreated
 * @property \backend\models\User $prlusrDeleted
 * @property \backend\models\User $prlusrUpdated
 * @property \backend\models\Usermember[] $usermembers
 * @property \backend\models\Userpay[] $userpays
 * @property string $aliasModel
 */
abstract class Pricelist extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    const PRL_PERCODE_1D = '1d';
    const PRL_PERCODE_2D = '2d';
    const PRL_PERCODE_3D = '3d';
    const PRL_PERCODE_1W = '1w';
    const PRL_PERCODE_2W = '2w';
    const PRL_PERCODE_3W = '3w';
    const PRL_PERCODE_4W = '4w';
    const PRL_PERCODE_1M = '1m';
    const PRL_PERCODE_2M = '2m';
    const PRL_PERCODE_3M = '3m';
    const PRL_PERCODE_6M = '6m';
    const PRL_PERCODE_1Y = '1y';
    const PRL_PERCODE_UNL = 'unl';
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'pricelist';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'prl_createdat',
                'updatedAtAttribute' => 'prl_updatedat',
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['prlmbr_id', 'prlcat_id', 'prl_name', 'prl_startdate', 'prl_enddate', 'prlsym_id', 'prl_price', 'prl_createdt', 'prlusr_created_id', 'prl_updatedt', 'prlusr_updated_id'], 'required'],
            [['prlmbr_id', 'prlcat_id', 'prl_active', 'prl_active4admin', 'prl_maxsignals', 'prl_allowedtimes', 'prlsym_id', 'prl_lock', 'prlusr_created_id', 'prlusr_updated_id', 'prl_deletedat', 'prlusr_deleted_id'], 'integer'],
            [['prlcad_crypto_ids', 'prl_startdate', 'prl_enddate', 'prl_createdt', 'prl_updatedt', 'prl_deletedt'], 'safe'],
            [['prl_percode', 'prl_remarks'], 'string'],
            [['prl_price'], 'number'],
            [['prl_name', 'prl_pretext', 'prl_posttext', 'prl_discountcode'], 'string', 'max' => 64],
            [['prlcat_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\Category::className(), 'targetAttribute' => ['prlcat_id' => 'id']],
            [['prlmbr_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\Membership::className(), 'targetAttribute' => ['prlmbr_id' => 'id']],
            [['prlsym_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\Symbol::className(), 'targetAttribute' => ['prlsym_id' => 'id']],
            [['prlusr_created_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['prlusr_created_id' => 'id']],
            [['prlusr_deleted_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['prlusr_deleted_id' => 'id']],
            [['prlusr_updated_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['prlusr_updated_id' => 'id']],
            ['prl_percode', 'in', 'range' => [
                    self::PRL_PERCODE_1D,
                    self::PRL_PERCODE_2D,
                    self::PRL_PERCODE_3D,
                    self::PRL_PERCODE_1W,
                    self::PRL_PERCODE_2W,
                    self::PRL_PERCODE_3W,
                    self::PRL_PERCODE_4W,
                    self::PRL_PERCODE_1M,
                    self::PRL_PERCODE_2M,
                    self::PRL_PERCODE_3M,
                    self::PRL_PERCODE_6M,
                    self::PRL_PERCODE_1Y,
                    self::PRL_PERCODE_UNL,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('models', 'ID'),
            'prlmbr_id' => Yii::t('models', 'Membership'),
            'prlcat_id' => Yii::t('models', 'Category'),
						'prlcad_crypto_ids' => Yii::t('models', 'CryptoAddresses'),
            'prl_active' => Yii::t('models', 'Active'),
						'prl_active4admin' => Yii::t('models', 'Active4Admin'),
            'prl_name' => Yii::t('models', 'Name'),
						'prl_pretext' => Yii::t('models', 'PreText'),
						'prl_posttext' => Yii::t('models', 'PostText'),
            'prl_startdate' => Yii::t('models', 'Startdate'),
            'prl_enddate' => Yii::t('models', 'Enddate'),
            'prl_percode' => Yii::t('models', 'Period'),
						'prl_maxsignals' => Yii::t('models', 'MaxSignals'),
						'prl_allowedtimes' => Yii::t('models', 'Max#'),
						'prl_discountcode' => Yii::t('models', 'Discountcode'),
            'prlsym_id' => Yii::t('models', 'FIAT Symbol'),
            'prl_price' => Yii::t('models', 'FIAT Price'),
            'prl_remarks' => Yii::t('models', 'Remarks'),
            'prl_lock' => Yii::t('models', 'Lock'),
            'prl_createdat' => Yii::t('models', 'CreatedAt'),
            'prl_createdt' => Yii::t('models', 'Created'),
            'prlusr_created_id' => Yii::t('models', 'CreatedBy'),
            'prl_updatedat' => Yii::t('models', 'UpdatedAt'),
            'prl_updatedt' => Yii::t('models', 'Updated'),
            'prlusr_updated_id' => Yii::t('models', 'UpdatedBy'),
            'prl_deletedat' => Yii::t('models', 'DeletedAt'),
            'prl_deletedt' => Yii::t('models', 'Deleted'),
            'prlusr_deleted_id' => Yii::t('models', 'DeletedBy'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
        /*    'id' => Yii::t('models', 'ID'),
            'prlmbr_id' => Yii::t('models', 'Membership'),
            'prlcat_id' => Yii::t('models', 'Category'), */
						'prlcad_crypto_ids' => Yii::t('models', 'Also payable with these cryptoAddresses'),
        /*    'prl_active' => Yii::t('models', 'Active'),
				*/		'prl_active4admin' => Yii::t('models', 'Active with minimal Admin level (for testing)'),
         /*   'prl_name' => Yii::t('models', 'Name'),
						'prl_pretext' => Yii::t('models', 'PreText'),
						'prl_posttext' => Yii::t('models', 'PostText'),
            'prl_startdate' => Yii::t('models', 'Startdate'),
            'prl_enddate' => Yii::t('models', 'Enddate'),
            'prl_percode' => Yii::t('models', 'Period'),
						'prl_maxsignals' => Yii::t('models', 'MaxSignals'),
						'prl_allowedtimes' => Yii::t('models', 'AllowedTimes'),
						'prl_discountcode' => Yii::t('models', 'Discountcode'), */
            'prlsym_id' => Yii::t('models', 'FIAT symbol, crypto is rated against this one'),
            'prl_price' => Yii::t('models', 'Price in FIAT symbol'),
        /*    'prl_remarks' => Yii::t('models', 'Remarks'),
            'prl_lock' => Yii::t('models', 'Lock'),
            'prl_createdat' => Yii::t('models', 'CreatedAt'),
            'prl_createdt' => Yii::t('models', 'Created'),
            'prlusr_created_id' => Yii::t('models', 'CreatedBy'),
            'prl_updatedat' => Yii::t('models', 'UpdatedAt'),
            'prl_updatedt' => Yii::t('models', 'Updated'),
            'prlusr_updated_id' => Yii::t('models', 'UpdatedBy'),
            'prl_deletedat' => Yii::t('models', 'DeletedAt'),
            'prl_deletedt' => Yii::t('models', 'Deleted'),
            'prlusr_deleted_id' => Yii::t('models', 'DeletedBy'), */
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPrlcat()
    {
        return $this->hasOne(\backend\models\Category::className(), ['id' => 'prlcat_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPrlmbr()
    {
        return $this->hasOne(\backend\models\Membership::className(), ['id' => 'prlmbr_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPrlsym()
    {
        return $this->hasOne(\backend\models\Symbol::className(), ['id' => 'prlsym_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPrlusrCreated()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'prlusr_created_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPrlusrDeleted()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'prlusr_deleted_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPrlusrUpdated()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'prlusr_updated_id']);
    }

    /**
		 * @return \yii\db\ActiveQuery
		 */
		public function getUsermembers()
    {
       return $this->hasMany(\backend\models\Usermember::className(), ['umbprl_id' => 'id']);
		}

	  /**
	   * @return \yii\db\ActiveQuery
		 */
		public function getUserpays()
		{
		    return $this->hasMany(\backend\models\Userpay::className(), ['upyprl_id' => 'id']);
		}


    /**
     * @inheritdoc
     * @return \backend\models\PricelistQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \backend\models\PricelistQuery(get_called_class());
    }


    /**
     * get column prl_percode enum value label
     * @param string $value
     * @return string
     */
    public static function getPrlPercodeValueLabel($value){
        $labels = self::optsPrlPercode();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column prl_percode ENUM value labels
     * @return array
     */
    public static function optsPrlPercode()
    {
        return [
            self::PRL_PERCODE_1D => Yii::t('models', '1d'),
            self::PRL_PERCODE_2D => Yii::t('models', '2d'),
            self::PRL_PERCODE_3D => Yii::t('models', '3d'),
            self::PRL_PERCODE_1W => Yii::t('models', '1w'),
            self::PRL_PERCODE_2W => Yii::t('models', '2w'),
            self::PRL_PERCODE_3W => Yii::t('models', '3w'),
            self::PRL_PERCODE_4W => Yii::t('models', '4w'),
            self::PRL_PERCODE_1M => Yii::t('models', '1m'),
            self::PRL_PERCODE_2M => Yii::t('models', '2m'),
            self::PRL_PERCODE_3M => Yii::t('models', '3m'),
            self::PRL_PERCODE_6M => Yii::t('models', '6m'),
            self::PRL_PERCODE_1Y => Yii::t('models', '1y'),
            self::PRL_PERCODE_UNL => Yii::t('models', 'Unl'),
        ];
    }

}
