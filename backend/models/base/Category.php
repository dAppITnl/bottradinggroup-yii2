<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\models\base;

use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "category".
 *
 * @property integer $id
 * @property string $cat_type
 * @property string $cat_language
 * @property string $cat_title
 * @property string $cat_description
 * @property string $cat_remarks
 * @property integer $cat_lock
 * @property string $cat_createdt
 * @property string $cat_updatedt
 * @property integer $cat_deletedat
 * @property string $cat_deletedt
 * @property integer $catusr_deleted_id
 * @property integer $cat_createdat
 * @property integer $catusr_created_id
 * @property integer $cat_updatedat
 * @property integer $catusr_updated_id
 *
 * @property \backend\models\User $catusrCreated
 * @property \backend\models\User $catusrDeleted
 * @property \backend\models\User $catusrUpdated
 * @property \backend\models\Membership[] $memberships
 * @property \backend\models\Pricelist[] $pricelists
 * @property \backend\models\Signal[] $signals
 * @property \backend\models\Userbot[] $userbots
 * @property \backend\models\Userpay[] $userpays
 * @property string $aliasModel
 */
abstract class Category extends \yii\db\ActiveRecord
{

    /**
    * ENUM field values
    */
    const CAT_CATTYPE_USR = 'usr';
    const CAT_CATTYPE_BOT = 'bot';
    const CAT_CATTYPE_SYM = 'sym';
    const CAT_CATTYPE_PAY = 'pay';
    const CAT_CATTYPE_SLG = 'slg';
    const CAT_CATTYPE_SIG = 'sig';
    const CAT_CATTYPE_MBR = 'mbr';
    const CAT_CATTYPE_PRL = 'prl';

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'category';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::className(),
                'createdByAttribute' => 'catusr_created_id',
                'updatedByAttribute' => 'catusr_updated_id',
            ],
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'cat_createdat',
                'updatedAtAttribute' => 'cat_updatedat',
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['cat_type', 'cat_title', 'cat_createdt', 'cat_updatedt'], 'required'],
            [['cat_type', 'cat_description', 'cat_remarks'], 'string'],
            [['cat_lock', 'cat_deletedat', 'catusr_deleted_id'], 'integer'],
            [['cat_createdt', 'cat_updatedt', 'cat_deletedt'], 'safe'],
            [['cat_language'], 'string', 'max' => 10],
            [['cat_title'], 'string', 'max' => 64],
            [['catusr_created_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['catusr_created_id' => 'id']],
            [['catusr_deleted_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['catusr_deleted_id' => 'id']],
            [['catusr_updated_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['catusr_updated_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('models', 'ID'),
            'cat_type' => Yii::t('models', 'Type'),
            'cat_language' => Yii::t('models', 'language'),
            'cat_title' => Yii::t('models', 'Title'),
            'cat_description' => Yii::t('models', 'Description'),
            'cat_remarks' => Yii::t('models', 'Remarks'),
            'cat_lock' => Yii::t('models', 'Lock'),
            'cat_createdat' => Yii::t('models', 'CreatedAt'),
            'cat_createdt' => Yii::t('models', 'Created'),
            'catusr_created_id' => Yii::t('models', 'CreatedBy'),
            'cat_updatedat' => Yii::t('models', 'UpdatedAt'),
            'cat_updatedt' => Yii::t('models', 'Updated'),
            'catusr_updated_id' => Yii::t('models', 'UpdatedBy'),
            'cat_deletedat' => Yii::t('models', 'DeletedAt'),
            'cat_deletedt' => Yii::t('models', 'Deleted'),
            'catusr_deleted_id' => Yii::t('models', 'DeletedBy'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
        /*    'id' => Yii::t('models', 'ID'),
            'cat_type' => Yii::t('models', 'Type'),
            'cat_language' => Yii::t('models', 'language'),
            'cat_title' => Yii::t('models', 'Title'),
            'cat_description' => Yii::t('models', 'Description'),
            'cat_remarks' => Yii::t('models', 'Remarks'),
            'cat_lock' => Yii::t('models', 'Lock'),
            'cat_createdat' => Yii::t('models', 'CreatedAt'),
            'cat_createdt' => Yii::t('models', 'Created'),
            'catusr_created_id' => Yii::t('models', 'CreatedBy'),
            'cat_updatedat' => Yii::t('models', 'UpdatedAt'),
            'cat_updatedt' => Yii::t('models', 'Updated'),
            'catusr_updated_id' => Yii::t('models', 'UpdatedBy'),
            'cat_deletedat' => Yii::t('models', 'DeletedAt'),
            'cat_deletedt' => Yii::t('models', 'Deleted'),
            'catusr_deleted_id' => Yii::t('models', 'DeletedBy'), */
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCatusrCreated()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'catusr_created_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCatusrDeleted()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'catusr_deleted_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCatusrUpdated()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'catusr_updated_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMemberships()
    {
        return $this->hasMany(\backend\models\Membership::className(), ['mbrcat_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPricelists()
    {
        return $this->hasMany(\backend\models\Pricelist::className(), ['prlcat_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSignals()
    {
        return $this->hasMany(\backend\models\Signal::className(), ['sigcat_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserbots()
    {
        return $this->hasMany(\backend\models\Userbot::className(), ['ubtcat_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserpays()
    {
        return $this->hasMany(\backend\models\Userpay::className(), ['upycat_id' => 'id']);
    }


    
    /**
     * @inheritdoc
     * @return \backend\models\CategoryQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \backend\models\CategoryQuery(get_called_class());
    }


}
