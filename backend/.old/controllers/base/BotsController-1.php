<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\controllers\base;

use backend\models\Bots;
use backend\models\BotsSearch;
use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use yii\filters\AccessControl;
use dmstr\bootstrap\Tabs;

/**
* BotsController implements the CRUD actions for Bots model.
*/
class BotsController extends Controller
{


	/**
	* @var boolean whether to enable CSRF validation for the actions in this controller.
	* CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
	*/
	public $enableCsrfValidation = false;

	/**
	* @inheritdoc
	*/
	public function behaviors()
	{
		return [
    	'access' => [
    		'class' => AccessControl::className(),
    		'rules' => [
    			/*[
						'allow' => true,
						'actions' => ['index', 'view', 'create', 'update', 'delete'],
						'roles' => ['BackendBotsFull'],
					],
					[
						'allow' => true,
						'actions' => ['index', 'view'],
						'roles' => ['BackendBotsView'],
					],
					[
						'allow' => true,
						'actions' => ['update', 'create', 'delete'],
						'roles' => ['BackendBotsEdit'],
					],*/
					[
						'allow' => true,
						'roles' => ['@'],  // Allow authenticated/loged in users
					],
					// anybody else is denied
				],
			],
    ];
	}

	/**
	* Lists all Bots models.
	* @return mixed
	*/
	public function actionIndex()
	{
    $searchModel  = new BotsSearch;
    $dataProvider = $searchModel->search($_GET);

		Tabs::clearLocalStorage();

		Url::remember();
		\Yii::$app->session['__crudReturnUrl'] = null;

		return $this->render('index', [
			'dataProvider' => $dataProvider,
    	'searchModel' => $searchModel,
		]);
	}

	/**
	* Displays a single Bots model.
	* @param integer $id
	*
	* @return mixed
	*/
	public function actionView($id)
	{
		\Yii::$app->session['__crudReturnUrl'] = Url::previous();
		Url::remember();
		Tabs::rememberActiveState();

		return $this->render('view', [
			'model' => $this->findModel($id),
		]);
	}

	/**
	* Creates a new Bots model.
	* If creation is successful, the browser will be redirected to the 'view' page.
	* @return mixed
	*/
	public function actionCreate()
	{
		try {
			$model = new Bots;
			$ok = false;
			if ($model->load($_POST)) {
				$model->created_at = $model->updated_at = time();
				$model->created_by = $model->updated_by = \Yii::$app->user->id;
				$model->bot_createdt = $model->bot_updatedt = date('Y-m-d H:i:s', time());
				if ($model->save()) { $ok = true; }
			}
			if ($ok) {
				return $this->redirect(['view', 'id' => $model->id]);
			} elseif (!\Yii::$app->request->isPost) {
				$model->load($_GET);
			}
		} catch (\Exception $e) {
			$msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
			$model->addError('_exception', $msg);
		}
		return $this->render('create', ['model' => $model]);
	}

	/**
	* Updates an existing Bots model.
	* If update is successful, the browser will be redirected to the 'view' page.
	* @param integer $id
	* @return mixed
	*/
	public function actionUpdate($id)
	{
		try {
			$model = $this->findModel($id);
			$ok = false;
			if ($model->load($_POST)) {
				$model->updated_at = time();
				$model->updated_by = \Yii::$app->user->id;
				$model->bot_updatedt = date('Y-m-d H:i:s', time());
				if ($model->save()) { $ok = true; }
    	}
			if ($ok) {
				return $this->redirect(Url::previous());
			} else {
				return $this->render('update', [
					'model' => $model,
				]);
			}
		} catch (\Exception $e) {
			$msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
			$model->addError('_exception', $msg);
		}
	}

	/**
	* Deletes an existing Bots model.
	* If deletion is successful, the browser will be redirected to the 'index' page.
	* @param integer $id
	* @return mixed
	*/
	public function actionDelete($id)
	{
		try {
			$model = $this->findModel($id); //->delete();
			$model->deleted_at = time();
			$model->deleted_by = \Yii::$app->user->id;
			$model->bot_deletedt = date('Y-m-d H:i:s', time());
      if ($model->save()) { $ok = true; }
		} catch (\Exception $e) {
			$msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
			\Yii::$app->getSession()->addFlash('error', $msg);
			return $this->redirect(Url::previous());
		}

		// TODO: improve detection
		$isPivot = strstr('$id',',');
		if (!$ok && $isPivot) {
			return $this->redirect(Url::previous());
		} elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
			Url::remember(null);
			$url = \Yii::$app->session['__crudReturnUrl'];
			\Yii::$app->session['__crudReturnUrl'] = null;

			return $this->redirect($url);
		} else {
			return $this->redirect(['index']);
		}
	}

	/**
	* Finds the Bots model based on its primary key value.
	* If the model is not found, a 404 HTTP exception will be thrown.
	* @param integer $id
	* @return Bots the loaded model
	* @throws HttpException if the model cannot be found
	*/
	protected function findModel($id)
	{
		if (($model = Bots::findOne($id)) !== null) {
			return $model;
		} else {
			throw new HttpException(404, 'The requested page does not exist.');
		}
	}
}
