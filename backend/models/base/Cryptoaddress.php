<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\models\base;

use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "cryptoaddress".
 *
 * @property integer $id
 * @property integer $cadsym_id
 * @property integer $cadusr_owner_id
 * @property string $cad_type
 * @property string $cadmbr_ids
 * @property integer $cad_active
 * @property string $cad_payprovider
 * @property integer $cad_ismainnet
 * @property string $cad_networkname
 * @property string $cad_networksettings
 * @property string $cad_tokenmetadata
 * @property string $cad_code
 * @property string $cad_name
 * @property string $cad_address
 * @property string $cad_memo
 * @property integer $cad_decimals
 * @property string $cad_contract
 * @property string $cad_description
 * @property string $cad_remarks
 * @property integer $cad_lock
 * @property string $cad_createdt
 * @property string $cad_updatedt
 * @property integer $cad_deletedat
 * @property string $cad_deletedt
 * @property integer $cadusr_deleted_id
 * @property integer $cad_createdat
 * @property integer $cadusr_created_id
 * @property integer $cad_updatedat
 * @property integer $cadusr_updated_id
 *
 * @property \backend\models\Symbol $cadsym
 * @property \backend\models\User $cadusrCreated
 * @property \backend\models\User $cadusrDeleted
 * @property \backend\models\User $cadusrOwner
 * @property \backend\models\User $cadusrUpdated
 * @property \backend\models\Userpay[] $userpays
 * @property string $aliasModel
 */
abstract class Cryptoaddress extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    const CAD_TYPE_OWN = 'own';
    const CAD_TYPE_ERC20 = 'erc20';
    const CAD_TYPE_ERC720 = 'erc720';
    const CAD_TYPE_ERC1150 = 'erc1150';
		const CAD_TYPE_BEP20 = 'bep20';
    const CAD_TYPE_OTHER = 'other';

   /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'cryptoaddress';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::className(),
                'createdByAttribute' => 'cadusr_created_id',
                'updatedByAttribute' => 'cadusr_updated_id',
            ],
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'cad_createdat',
                'updatedAtAttribute' => 'cad_updatedat',
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['cadsym_id', 'cadusr_owner_id', 'cad_type', 'cadmbr_ids', 'cad_networkname', 'cad_code', 'cad_name', 'cad_address', 'cad_createdt', 'cad_updatedt'], 'required'],
            [['cadsym_id', 'cadusr_owner_id', 'cad_active', 'cad_ismainnet', 'cad_decimals', 'cad_lock', 'cad_deletedat', 'cadusr_deleted_id'], 'integer'],
            [['cad_type', 'cad_tokenmetadata', 'cad_description', 'cad_remarks'], 'string'],
            [['cadmbr_ids', 'cad_createdt', 'cad_updatedt', 'cad_deletedt'], 'safe'],
						[['cad_payprovider'], 'string', 'max' => 16],
            [['cad_networkname', 'cad_code', 'cad_memo'], 'string', 'max' => 32],
						[['cad_networksettings'], 'string', 'max' => 256],
            [['cad_name'], 'string', 'max' => 64],
            [['cad_address', 'cad_contract'], 'string', 'max' => 128],
            [['cad_code'], 'unique'],
            [['cadsym_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\Symbol::className(), 'targetAttribute' => ['cadsym_id' => 'id']],
            [['cadusr_created_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['cadusr_created_id' => 'id']],
            [['cadusr_deleted_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['cadusr_deleted_id' => 'id']],
            [['cadusr_owner_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['cadusr_owner_id' => 'id']],
            [['cadusr_updated_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\models\User::className(), 'targetAttribute' => ['cadusr_updated_id' => 'id']],
            ['cad_type', 'in', 'range' => [
                    self::CAD_TYPE_OWN,
                    self::CAD_TYPE_ERC20,
                    self::CAD_TYPE_ERC720,
                    self::CAD_TYPE_ERC1150,
										self::CAD_TYPE_BEP20,
                    self::CAD_TYPE_OTHER,
                ]
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('models', 'ID'),
            'cadsym_id' => Yii::t('models', 'Symbol'),
            'cadusr_owner_id' => Yii::t('models', 'UserOwner'),
            'cad_type' => Yii::t('models', 'Contracttype'),
            'cadmbr_ids' => Yii::t('models', 'Memberships'),
            'cad_active' => Yii::t('models', 'Active'),
						'cad_payprovider' => Yii::t('models', 'PayProvider'),
            'cad_ismainnet' => Yii::t('models', 'IsMainnet'),
            'cad_networkname' => Yii::t('models', 'Network'),
						'cad_networksettings' => Yii::t('models', 'NetworkSettings'),
						'cad_tokenmetadata' => Yii::t('models', 'TokenMetadata'),
            'cad_code' => Yii::t('models', 'Code'),
            'cad_name' => Yii::t('models', 'Name'),
            'cad_address' => Yii::t('models', 'Address'),
            'cad_memo' => Yii::t('models', 'AddressMemo'),
            'cad_decimals' => Yii::t('models', 'Decimals'),
            'cad_contract' => Yii::t('models', 'Contract'),
            'cad_description' => Yii::t('models', 'Description'),
            'cad_remarks' => Yii::t('models', 'Remarks'),
            'cad_lock' => Yii::t('models', 'Lock'),
            'cad_createdat' => Yii::t('models', 'CreatedAt'),
            'cad_createdt' => Yii::t('models', 'Created'),
            'cadusr_created_id' => Yii::t('models', 'CreatedBy'),
            'cad_updatedat' => Yii::t('models', 'UpdatedAt'),
            'cad_updatedt' => Yii::t('models', 'Updated'),
            'cadusr_updated_id' => Yii::t('models', 'UpdatedBy'),
            'cad_deletedat' => Yii::t('models', 'DeletedAt'),
            'cad_deletedt' => Yii::t('models', 'Deleted'),
            'cadusr_deleted_id' => Yii::t('models', 'DeletedBy'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
        /*    'id' => Yii::t('models', 'ID'),
            'cadsym_id' => Yii::t('models', 'Symbol'),
            'cadusr_owner_id' => Yii::t('models', 'UserOwner'),
            'cad_type' => Yii::t('models', 'cryptoaddresstype'),
            'cadmbr_ids' => Yii::t('models', 'Memberships'),
            'cad_active' => Yii::t('models', 'Active'),
						'cad_payprovider' => Yii::t('models', 'PayProvider'),
            'cad_ismainnet' => Yii::t('models', 'IsMainnet'),
            'cad_networkname' => Yii::t('models', 'Networkname'), */
						'cad_networksettings' => Yii::t('models', "Fill for Networkname='Other' with: {'name':'', 'rpcurl':'', 'chainID':'', 'symbol':'', 'explorer':''}"),
						'cad_tokenmetadata' => Yii::t('models', 'Update via button from Moralis'),
        /*    'cad_code' => Yii::t('models', 'Code'),
            'cad_name' => Yii::t('models', 'Name'),
        */    'cad_address' => Yii::t('models', 'Address to receive payments'), /*
            'cad_memo' => Yii::t('models', 'AddressMemo'),
            'cad_decimals' => Yii::t('models', 'Decimals'),
        */    'cad_contract' => Yii::t('models', 'Contract address of token (symbol) at Network (for EVM compatible chain)'),  /*
            'cad_description' => Yii::t('models', 'Description'),
            'cad_remarks' => Yii::t('models', 'Remarks'),
            'cad_lock' => Yii::t('models', 'Lock'),
            'cad_createdat' => Yii::t('models', 'CreatedAt'),
            'cad_createdt' => Yii::t('models', 'Created'),
            'cadusr_created_id' => Yii::t('models', 'CreatedBy'),
            'cad_updatedat' => Yii::t('models', 'UpdatedAt'),
            'cad_updatedt' => Yii::t('models', 'Updated'),
            'cadusr_updated_id' => Yii::t('models', 'UpdatedBy'),
            'cad_deletedat' => Yii::t('models', 'DeletedAt'),
            'cad_deletedt' => Yii::t('models', 'Deleted'),
            'cadusr_deleted_id' => Yii::t('models', 'DeletedBy'), */
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCadsym()
    {
        return $this->hasOne(\backend\models\Symbol::className(), ['id' => 'cadsym_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCadusrCreated()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'cadusr_created_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCadusrDeleted()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'cadusr_deleted_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCadusrOwner()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'cadusr_owner_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCadusrUpdated()
    {
        return $this->hasOne(\backend\models\User::className(), ['id' => 'cadusr_updated_id']);
    }

   /**
   * @return \yii\db\ActiveQuery
   */
   public function getUserpays()
   {
       return $this->hasMany(\backend\models\Userpay::className(), ['upycad_to_id' => 'id']);
   }


    /**
     * @inheritdoc
     * @return \backend\models\CryptoaddressQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \backend\models\CryptoaddressQuery(get_called_class());
    }


    /**
     * get column cad_type enum value label
     * @param string $value
     * @return string
     */
    public static function getCadTypeValueLabel($value){
        $labels = self::optsCadType();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column cad_type ENUM value labels
     * @return array
     */
    public static function optsCadType()
    {
        return [
            self::CAD_TYPE_OWN => Yii::t('models', 'Own'),
            self::CAD_TYPE_ERC20 => Yii::t('models', 'ERC20'),
            self::CAD_TYPE_ERC720 => Yii::t('models', 'ERC720'),
            self::CAD_TYPE_ERC1150 => Yii::t('models', 'ERC1150'),
						self::CAD_TYPE_BEP20 => Yii::t('models', 'BEP20'),
            self::CAD_TYPE_OTHER => Yii::t('models', 'Other'),
        ];
    }

}
