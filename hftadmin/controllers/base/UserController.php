<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace hftadmin\controllers\base;

use Yii;
use hftadmin\models\User;
use hftadmin\models\UserSearch;
use common\models\User as UserIdentify;
use backend\models\User as BackendUser;
use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use yii\filters\AccessControl;
use dmstr\bootstrap\Tabs;
use common\helpers\GeneralHelper;

use frontend\models\SignupForm;


/**
* UserController implements the CRUD actions for User model.
*/
class UserController extends Controller
{


	/**
	* @var boolean whether to enable CSRF validation for the actions in this controller.
	* CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
	*/
	public $enableCsrfValidation = false;

  /**
  * @inheritdoc
  */
  public function behaviors()
  {
    $access = GeneralHelper::checkSiteAccess();
    Yii::trace('** behavior UserController: '.print_r($access, true));
    return [
	    'access' => [
    		'class' => AccessControl::className(),
    		'rules' => [
    			/*[
    				'allow' => true,
            'actions' => ['index', 'view', 'create', 'update', 'delete'],
            'roles' => ['hftadminUserFull'],
          ],
    			[
    				'allow' => true,
            'actions' => ['index', 'view'],
            'roles' => ['hftadminUserView'],
          ],
    			[
    				'allow' => true,
            'actions' => ['update', 'create', 'delete'],
            'roles' => ['hftadminUserEdit'],
          ],*/
          [
            'allow' => ($access['hftadmin'] == 'true'),
            'roles' => ['@'],  // Allow authenticated/loged in users
          ],
          // anybody else is denied
        ],
      ],
    ];
  }

	/**
	* Lists all User models.
	* @return mixed
	*/
	public function actionIndex()
	{
    $searchModel  = new UserSearch;
    $dataProvider = $searchModel->search($_GET);

		Tabs::clearLocalStorage();

		Url::remember();
		\Yii::$app->session['__crudReturnUrl'] = null;

		return $this->render('index', [
			'dataProvider' => $dataProvider,
    	'searchModel' => $searchModel,
		]);
	}

	/**
	* Displays a single User model.
	* @param integer $id
	*
	* @return mixed
	*/
	public function actionView($id)
	{
		\Yii::$app->session['__crudReturnUrl'] = Url::previous();
		Url::remember();
		Tabs::rememberActiveState();

		return $this->render('view', [
			'model' => $this->findModel($id),
		]);
	}

	/**
	* Creates a new User model.
	* If creation is successful, the browser will be redirected to the 'view' page.
	* @return mixed
	*/
	public function actionCreate()
	{
		//return $this->redirect(['index']);

		// Create User here allowed - was only via signup
		$model = new User;
    try {
      $model = new User;
      $ok = false;
			$model->usr_sitecsstheme = GeneralHelper::SITECSS_WHITE;
			$model->usr_language = GeneralHelper::LANGUAGE_NLNL;
      if ($model->load($_POST) && (!empty($model->usr_firstname) || !empty($model->usr_lastname))) {
				$model->username = str_replace(' ','', $model->usr_firstname.ucfirst($model->usr_lastname)).'|'.uniqid();
				$model->status = UserIdentify::STATUS_INACTIVE;
				$model->usr_password = GeneralHelper::generateRandomString(16);
				$model->password_hash = Yii::$app->security->generatePasswordHash($model->usr_password);
				$model->auth_key = Yii::$app->security->generateRandomString();
				$model->usr_signalactive = 0;

        $model->created_at = $model->updated_at = time();
        $model->created_by = $model->updated_by = \Yii::$app->user->id;
        $model->usr_createdt = $model->usr_updatedt = date('Y-m-d H:i:s', time());
        if ($model->save()) { $ok = true; }
      } else {
				//$model->usr_language = GeneralHelper::LANGUAGE_NLNL;
				$model->usr_sitelevel = BackendUser::USR_SITELEVEL_MEMBER; // initial
			}
      if ($ok) {
        return $this->redirect(['view', 'id' => $model->id]);
      } elseif (!\Yii::$app->request->isPost) {
        $model->load($_GET);
      }
    } catch (\Exception $e) {
      $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
      $model->addError('_exception', $msg);
    }
    return $this->render('create', ['model' => $model]);
	}

	/**
	* Updates an existing User model.
	* If update is successful, the browser will be redirected to the 'view' page.
	* @param integer $id
	* @return mixed
	*/
	public function actionUpdate($id)
	{
    $userModel = new User;
    try {
      $userModel = User::findOne(!empty($id) ? $id : Yii::$app->user->id);
      $ok = $emailChanged = false;
      $prevEmail = $userModel->email;
			$discordRoles = $userModel->usr_discordroles; // to be replaced by Role names, readonly! Change via setdiscordtoken screen
      if ($userModel->load($_POST)) {
				$userModel->usr_sitecsstheme = GeneralHelper::SITECSS_WHITE;
				if (empty($userModel->usr_language)) $userModel->usr_language = GeneralHelper::LANGUAGE_NLNL;
				if (empty($userModel->usr_sitelevel)) $userModel->usr_sitelevel = BackendUser::USR_SITELEVEL_MEMBER;
				// ..
				$userModel->usr_discordroles = $discordRoles; // set to id's , not the replaced names for readonly view in form..
        $emailChanged = ($userModel->email != $prevEmail);
        if ($emailChanged) {
          $userModel->status = UserIdentify::STATUS_INACTIVE;
          $userModel->verification_token = UserIdentify::generateEmailVerificationToken(true);
        }
        $userModel->updated_at = time();
        $userModel->updated_by = \Yii::$app->user->id;
        $userModel->usr_updatedt = date('Y-m-d H:i:s', time());
        if ($userModel->save() && SignupForm::sendEmail($userModel)) { $ok = true; }
      }
      if ($ok) {
        if ($emailChanged) Yii::$app->session->setFlash('success', Yii::t('app', 'Please check your inbox for verification email.'));
        return $this->redirect(/*'/user/index'*/Url::previous());
      }
    } catch (\Exception $e) {
      $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
      $userModel->addError('_exception', $msg);
    }

		if (!empty($discordRoles)) {
			$discordRoles = GeneralHelper::getDiscordRoles();
			$rolenames = [];
			foreach(explode(',', $userModel->usr_discordroles) as $role) {
				$roleNames[] = $discordRoles[ $role ];
			}
			$userModel->usr_discordroles = implode(',', $roleNames);
		}

    return $this->render('update', ['model' => $userModel, ]);
	}

	/**
	* Deletes an existing User model.
	* If deletion is successful, the browser will be redirected to the 'index' page.
	* @param integer $id
	* @return mixed
	*/
	public function actionDelete($id)
	{
    try {
      $model = $this->findModel($id); //->delete();
      $model->deleted_at = time();
      $model->deleted_by = \Yii::$app->user->id;
      $model->usr_deletedt = date('Y-m-d H:i:s', time());
      if ($model->save()) { $ok = true; }
    } catch (\Exception $e) {
      $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
      \Yii::$app->getSession()->addFlash('error', $msg);
      return $this->redirect(Url::previous());
    }

    // TODO: improve detection
    $isPivot = strstr('$id',',');
    if (!$ok && $isPivot) {
      return $this->redirect(Url::previous());
    } elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
      Url::remember(null);
      $url = \Yii::$app->session['__crudReturnUrl'];
      \Yii::$app->session['__crudReturnUrl'] = null;

      return $this->redirect($url);
    } else {
      return $this->redirect(['index']);
    }
	}

	/**
	* Finds the User model based on its primary key value.
	* If the model is not found, a 404 HTTP exception will be thrown.
	* @param integer $id
	* @return User the loaded model
	* @throws HttpException if the model cannot be found
	*/
	protected function findModel($id)
	{
		if (($model = User::findOne($id)) !== null) {
			return $model;
		} else {
			throw new HttpException(404, 'The requested page does not exist.');
		}
	}
}
